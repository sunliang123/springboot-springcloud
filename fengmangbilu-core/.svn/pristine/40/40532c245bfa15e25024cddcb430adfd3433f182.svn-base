package com.fengmangbilu.util;

public class IdWorker {

	// 业务标识位数
	private long workerId;
	// 数据中心标识位数
	private long datacenterId;
	// 毫秒内自增位
	private long sequence;

	public IdWorker(long workerId, long datacenterId, long sequence) {
		// sanity check for workerId
		if (workerId > maxWorkerId || workerId < 0) {
			throw new IllegalArgumentException(
					String.format("worker Id can't be greater than %d or less than 0", maxWorkerId));
		}
		if (datacenterId > maxDatacenterId || datacenterId < 0) {
			throw new IllegalArgumentException(
					String.format("datacenter Id can't be greater than %d or less than 0", maxDatacenterId));
		}
		this.workerId = workerId;
		this.datacenterId = datacenterId;
		this.sequence = sequence;
	}

	private long twepoch = 1514764800000L;

	private long workerIdBits = 5L;
	private long datacenterIdBits = 5L;
	private long maxWorkerId = -1L ^ (-1L << workerIdBits);
	private long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);
	private long sequenceBits = 12L;

	private long workerIdShift = sequenceBits;
	private long datacenterIdShift = sequenceBits + workerIdBits;
	private long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;
	private long sequenceMask = -1L ^ (-1L << sequenceBits);

	private long lastTimestamp = -1L;

	public long getWorkerId() {
		return workerId;
	}
	
	public long getDatacenterId() {
		return workerId;
	}

	public long getTimestamp() {
		return SystemClock.now();
	}

	public synchronized long nextId() {
		long timestamp = timeGen();

		if (timestamp < lastTimestamp) {
			throw new RuntimeException(String.format(
					"Clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));
		}

		if (lastTimestamp == timestamp) {
			sequence = (sequence + 1) & sequenceMask;
			if (sequence == 0) {
				timestamp = tilNextMillis(lastTimestamp);
			}
		} else {
			sequence = 0;
		}

		lastTimestamp = timestamp;
		return ((timestamp - twepoch) << timestampLeftShift) | (datacenterId << datacenterIdShift)
				| (workerId << workerIdShift) | sequence;
	}

	private long tilNextMillis(long lastTimestamp) {
		long timestamp = timeGen();
		while (timestamp <= lastTimestamp) {
			timestamp = timeGen();
		}
		return timestamp;
	}

	private long timeGen() {
		return SystemClock.now();
	}

//	protected long getDatacenterId() {
//		try {
//			InetAddress ip = InetAddress.getLocalHost();
//			NetworkInterface network = NetworkInterface.getByInetAddress(ip);
//			long id;
//			if (network == null) {
//				id = 1;
//			} else {
//				byte[] mac = network.getHardwareAddress();
//				id = ((0x000000FF & (long) mac[mac.length - 1])
//						| (0x0000FF00 & (((long) mac[mac.length - 2]) << 8))) >> 6;
//			}
//			return id;
//		} catch (SocketException e) {
//		} catch (UnknownHostException e) {
//		}
//		return datacenterId;
//	}
}
