package com.fengmangbilu.data.repository;

import static com.fengmangbilu.data.repository.DataTablesSupport.getPageable;

import java.io.Serializable;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Order;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.domain.Specifications;
import org.springframework.data.jpa.repository.support.JpaEntityInformation;
import org.springframework.data.jpa.repository.support.QueryDslJpaRepository;
import org.springframework.data.querydsl.EntityPathResolver;
import org.springframework.data.querydsl.SimpleEntityPathResolver;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import com.fengmangbilu.data.domain.datatables.DataTablesInput;
import com.fengmangbilu.data.domain.datatables.DataTablesOutput;

/**
 * @author Justice
 */
public class GenericJpaRepository<T, ID extends Serializable> extends QueryDslJpaRepository<T, ID>
		implements GenericRepository<T, ID> {

	private static final String NAME_MUST_NOT_BE_NULL = "The given name must not be null!";

	private static final EntityPathResolver DEFAULT_ENTITY_PATH_RESOLVER = SimpleEntityPathResolver.INSTANCE;

	private EntityManager em;

	public GenericJpaRepository(JpaEntityInformation<T, ID> entityInformation, EntityManager entityManager) {
		this(entityInformation, entityManager, DEFAULT_ENTITY_PATH_RESOLVER);
		this.em = entityManager;
	}

	public GenericJpaRepository(JpaEntityInformation<T, ID> entityInformation, EntityManager entityManager,
			EntityPathResolver resolver) {
		super(entityInformation, entityManager);
		this.em = entityManager;
	}

	@Override
	public List<T> findAll(String name, String value) {
		Assert.notNull(name, NAME_MUST_NOT_BE_NULL);

		ByNameSpecification<T> spec = new ByNameSpecification<T>(name, value);
		return getQuery(spec, (Sort) null).getResultList();
	}

	@Override
	public T findOne(String name, String value) {
		Assert.notNull(name, NAME_MUST_NOT_BE_NULL);

		try {
			ByNameSpecification<T> spec = new ByNameSpecification<T>(name, value);
			return getQuery(spec, (Sort) null).getSingleResult();
		} catch (NoResultException e) {
			return null;
		}
	}

	private static final class ByNameSpecification<T> implements Specification<T> {

		private final String name;
		private final String value;

		public ByNameSpecification(String name, String value) {
			this.name = name;
			this.value = value;
		}

		public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
			String[] names = StringUtils.split(name, ".");
			Path<String> path = root.get(names[0]);
			String[] nameArr = ArrayUtils.subarray(names, 1, names.length);
			for (String name : nameArr) {
				path = path.get(name);
			}
			Predicate p = cb.equal(path, value);
			query.where(p);
			return query.getRestriction();
		}
	}

	@Override
	@Transactional
	public String getMySqlNextVal(String seqName) {
		Query query = em.createNativeQuery("SELECT NEXTVAL('" + seqName + "')");
		String nextVal = String.valueOf(query.getSingleResult());
		return nextVal;
	}

	@Override
	public DataTablesOutput<T> findAll(DataTablesInput input) {
		return findAll(input, null);
	}

	@Override
	public DataTablesOutput<T> findAll(DataTablesInput input, Specification<T> specification) {
		DataTablesOutput<T> output = new DataTablesOutput<T>();
		output.setDraw(input.getDraw());
		if (input.getLength() == 0) {
			return output;
		}
		try {
			long recordsTotal = specification == null ? count() : count(specification);
			if (recordsTotal == 0) {
				return output;
			}
			output.setRecordsTotal(recordsTotal);

			Specification<T> specifications = DataTablesSpecificationFactory.createSpecification(input);
			Page<T> data = findAll(Specifications.where(specifications).and(specification), getPageable(input, null));

			List<T> content = (List<T>) data.getContent();
			output.setData(content);
			output.setRecordsFiltered(data.getTotalElements());

		} catch (Exception e) {
			output.setError(e.toString());
		}

		return output;
	}

	@Override
	public DataTablesOutput<T> findAll(DataTablesInput input, Specification<T> specification, List<Order> orders) {
		DataTablesOutput<T> output = new DataTablesOutput<T>();
		output.setDraw(input.getDraw());
		if (input.getLength() == 0) {
			return output;
		}
		try {
			long recordsTotal = specification == null ? count() : count(specification);
			if (recordsTotal == 0) {
				return output;
			}
			output.setRecordsTotal(recordsTotal);

			Specification<T> specifications = DataTablesSpecificationFactory.createSpecification(input);
			Page<T> data = findAll(Specifications.where(specifications).and(specification), getPageable(input, orders));

			List<T> content = (List<T>) data.getContent();
			output.setData(content);
			output.setRecordsFiltered(data.getTotalElements());

		} catch (Exception e) {
			output.setError(e.toString());
		}

		return output;
	}
}
