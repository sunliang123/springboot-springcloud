package com.fengmangbilu.microservice.common.security.config;

import java.util.Collections;

import org.springframework.http.MediaType;
import org.springframework.security.authentication.AuthenticationEventPublisher;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.SecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.ExceptionHandlingConfigurer;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.DefaultSecurityFilterChain;
import org.springframework.security.web.access.AccessDeniedHandler;
import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;
import org.springframework.security.web.util.matcher.MediaTypeRequestMatcher;
import org.springframework.util.Assert;
import org.springframework.web.accept.ContentNegotiationStrategy;
import org.springframework.web.accept.HeaderContentNegotiationStrategy;

import com.fengmangbilu.microservice.common.security.authentication.TokenAccessDeniedHandler;
import com.fengmangbilu.microservice.common.security.authentication.TokenAuthenticationEntryPoint;
import com.fengmangbilu.microservice.common.security.authentication.TokenAuthenticationManager;
import com.fengmangbilu.microservice.common.security.authentication.TokenAuthenticationProcessingFilter;
import com.fengmangbilu.microservice.common.security.authentication.TokenExtractor;
import com.fengmangbilu.microservice.common.security.token.DefaultTokenService;
import com.fengmangbilu.microservice.common.security.token.TokenService;
import com.fengmangbilu.microservice.common.security.token.TokenStore;
import com.fengmangbilu.microservice.common.security.token.store.JwtTokenStore;

public final class MicroserviceSecurityConfigurer extends SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> {

	private AuthenticationEntryPoint authenticationEntryPoint = new TokenAuthenticationEntryPoint();

	private AccessDeniedHandler accessDeniedHandler = new TokenAccessDeniedHandler();

	private TokenAuthenticationProcessingFilter tokenFilter;

	private AuthenticationManager authenticationManager;

	private AuthenticationEventPublisher eventPublisher = null;

	private TokenService tokenService;

	private TokenStore tokenStore = new JwtTokenStore();

	private TokenExtractor tokenExtractor;

	private boolean stateless = true;

	public MicroserviceSecurityConfigurer() {
	}

	public TokenStore getTokenStore() {
		return tokenStore;
	}

	public MicroserviceSecurityConfigurer stateless(boolean stateless) {
		this.stateless = stateless;
		return this;
	}

	public MicroserviceSecurityConfigurer authenticationEntryPoint(AuthenticationEntryPoint authenticationEntryPoint) {
		this.authenticationEntryPoint = authenticationEntryPoint;
		return this;
	}

	public MicroserviceSecurityConfigurer accessDeniedHandler(AccessDeniedHandler accessDeniedHandler) {
		this.accessDeniedHandler = accessDeniedHandler;
		return this;
	}

	public MicroserviceSecurityConfigurer tokenStore(TokenStore tokenStore) {
		Assert.state(tokenStore != null, "TokenStore cannot be null");
		this.tokenStore = tokenStore;
		return this;
	}

	public MicroserviceSecurityConfigurer eventPublisher(AuthenticationEventPublisher eventPublisher) {
		Assert.state(eventPublisher != null, "AuthenticationEventPublisher cannot be null");
		this.eventPublisher = eventPublisher;
		return this;
	}

	public MicroserviceSecurityConfigurer tokenExtractor(TokenExtractor tokenExtractor) {
		Assert.state(tokenExtractor != null, "TokenExtractor cannot be null");
		this.tokenExtractor = tokenExtractor;
		return this;
	}

	public MicroserviceSecurityConfigurer authenticationManager(AuthenticationManager authenticationManager) {
		Assert.state(authenticationManager != null, "AuthenticationManager cannot be null");
		this.authenticationManager = authenticationManager;
		return this;
	}

	public MicroserviceSecurityConfigurer tokenService(TokenService tokenService) {
		Assert.state(tokenService != null, "tokenService cannot be null");
		this.tokenService = tokenService;
		return this;
	}

	@Override
	public void init(HttpSecurity http) throws Exception {
		registerDefaultAuthenticationEntryPoint(http);
	}

	@SuppressWarnings("unchecked")
	private void registerDefaultAuthenticationEntryPoint(HttpSecurity http) {
		ExceptionHandlingConfigurer<HttpSecurity> exceptionHandling = http.getConfigurer(ExceptionHandlingConfigurer.class);
		if (exceptionHandling == null) {
			return;
		}
		ContentNegotiationStrategy contentNegotiationStrategy = http.getSharedObject(ContentNegotiationStrategy.class);
		if (contentNegotiationStrategy == null) {
			contentNegotiationStrategy = new HeaderContentNegotiationStrategy();
		}
		MediaTypeRequestMatcher preferredMatcher = new MediaTypeRequestMatcher(contentNegotiationStrategy, MediaType.APPLICATION_ATOM_XML,
				MediaType.APPLICATION_FORM_URLENCODED, MediaType.APPLICATION_JSON, MediaType.APPLICATION_OCTET_STREAM,
				MediaType.APPLICATION_XML, MediaType.MULTIPART_FORM_DATA, MediaType.TEXT_XML);
		preferredMatcher.setIgnoredMediaTypes(Collections.singleton(MediaType.ALL));
		exceptionHandling.defaultAuthenticationEntryPointFor(postProcess(authenticationEntryPoint), preferredMatcher);
	}

	@Override
	public void configure(HttpSecurity http) throws Exception {

		AuthenticationManager oauthAuthenticationManager = tokenAuthenticationManager(http);
		tokenFilter = new TokenAuthenticationProcessingFilter();
		tokenFilter.setAuthenticationEntryPoint(authenticationEntryPoint);
		tokenFilter.setAuthenticationManager(oauthAuthenticationManager);
		if (eventPublisher != null) {
			tokenFilter.setAuthenticationEventPublisher(eventPublisher);
		}
		if (tokenExtractor != null) {
			tokenFilter.setTokenExtractor(tokenExtractor);
		}
		tokenFilter = postProcess(tokenFilter);
		tokenFilter.setStateless(stateless);

		// @formatter:off
		http
			.authorizeRequests()
		.and()
			.addFilterBefore(tokenFilter, AbstractPreAuthenticatedProcessingFilter.class)
			.exceptionHandling()
				.accessDeniedHandler(accessDeniedHandler)
				.authenticationEntryPoint(authenticationEntryPoint);
		// @formatter:on
	}

	private AuthenticationManager tokenAuthenticationManager(HttpSecurity http) {
		TokenAuthenticationManager tokenAuthenticationManager = new TokenAuthenticationManager();
		if (authenticationManager != null) {
			if (authenticationManager instanceof TokenAuthenticationManager) {
				tokenAuthenticationManager = (TokenAuthenticationManager) authenticationManager;
			} else {
				return authenticationManager;
			}
		}
		tokenAuthenticationManager.setTokenService(tokenService(http));
		return tokenAuthenticationManager;
	}

	private TokenService tokenService(HttpSecurity http) {
		if (tokenService != null) {
			return tokenService;
		}
		DefaultTokenService tokenService = new DefaultTokenService();
		tokenService.setTokenStore(tokenStore());
		this.tokenService = tokenService;
		return tokenService;
	}

	private TokenStore tokenStore() {
		Assert.state(tokenStore != null, "TokenStore cannot be null");
		return this.tokenStore;
	}

	public AccessDeniedHandler getAccessDeniedHandler() {
		return this.accessDeniedHandler;
	}
}
