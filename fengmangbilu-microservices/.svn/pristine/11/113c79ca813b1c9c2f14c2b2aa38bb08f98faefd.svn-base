package com.fengmangbilu.microservice.security.approval;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.util.Assert;

import static com.fengmangbilu.microservice.security.approval.Approval.ApprovalStatus.APPROVED;
import com.fengmangbilu.microservice.security.approval.Approval.ApprovalStatus;

public class JdbcApprovalStore implements ApprovalStore {

	private final JdbcTemplate jdbcTemplate;

	private final Log logger = LogFactory.getLog(getClass());

	private final RowMapper<Approval> rowMapper = new AuthorizationRowMapper();

	private static final String TABLE_NAME = "token_approvals";

	private static final String FIELDS = "expiresAt,status,lastModifiedAt,userId";

	private static final String WHERE_KEY = "where userId=?";

	private static final String DEFAULT_ADD_APPROVAL_STATEMENT = String.format("insert into %s ( %s ) values (?,?,?,?)", TABLE_NAME, FIELDS);

	private static final String DEFAULT_REFRESH_APPROVAL_STATEMENT = String.format("update %s set expiresAt=?, status=?, lastModifiedAt=? " + WHERE_KEY, TABLE_NAME);

	private static final String DEFAULT_GET_APPROVAL_SQL = String.format("select %s from %s " + WHERE_KEY, FIELDS, TABLE_NAME);

	private static final String DEFAULT_DELETE_APPROVAL_SQL = String.format("delete from %s " + WHERE_KEY, TABLE_NAME);

	private static final String DEFAULT_EXPIRE_APPROVAL_STATEMENT = String.format("update %s set expiresAt = ? " + WHERE_KEY, TABLE_NAME);

	private String addApprovalStatement = DEFAULT_ADD_APPROVAL_STATEMENT;

	private String refreshApprovalStatement = DEFAULT_REFRESH_APPROVAL_STATEMENT;

	private String findApprovalStatement = DEFAULT_GET_APPROVAL_SQL;

	private String deleteApprovalStatment = DEFAULT_DELETE_APPROVAL_SQL;

	private String expireApprovalStatement = DEFAULT_EXPIRE_APPROVAL_STATEMENT;

	private boolean handleRevocationsAsExpiry = false;

	public JdbcApprovalStore(DataSource dataSource) {
		Assert.notNull(dataSource, "dataSource must not null");
		this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	public void setHandleRevocationsAsExpiry(boolean handleRevocationsAsExpiry) {
		this.handleRevocationsAsExpiry = handleRevocationsAsExpiry;
	}

	public void setAddApprovalStatement(String addApprovalStatement) {
		this.addApprovalStatement = addApprovalStatement;
	}

	public void setFindApprovalStatement(String findApprovalStatement) {
		this.findApprovalStatement = findApprovalStatement;
	}

	public void setDeleteApprovalStatment(String deleteApprovalStatment) {
		this.deleteApprovalStatment = deleteApprovalStatment;
	}

	public void setExpireApprovalStatement(String expireApprovalStatement) {
		this.expireApprovalStatement = expireApprovalStatement;
	}

	public void setRefreshApprovalStatement(String refreshApprovalStatement) {
		this.refreshApprovalStatement = refreshApprovalStatement;
	}

	@Override
	public boolean addApprovals(final Collection<Approval> approvals) {
		logger.debug(String.format("adding approvals: [%s]", approvals));
		boolean success = true;
		for (Approval approval : approvals) {
			if (!updateApproval(refreshApprovalStatement, approval)) {
				if (!updateApproval(addApprovalStatement, approval)) {
					success = false;
				}
			}
		}
		return success;
	}

	@Override
	public boolean revokeApprovals(Collection<Approval> approvals) {
		logger.debug(String.format("Revoking approvals: [%s]", approvals));
		boolean success = true;
		for (final Approval approval : approvals) {
			if (handleRevocationsAsExpiry) {
				int refreshed = jdbcTemplate.update(expireApprovalStatement, new PreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps) throws SQLException {
						ps.setTimestamp(1, new Timestamp(System.currentTimeMillis()));
						ps.setString(2, approval.getUserId());
					}
				});
				if (refreshed != 1) {
					success = false;
				}
			} else {
				int refreshed = jdbcTemplate.update(deleteApprovalStatment, new PreparedStatementSetter() {
					@Override
					public void setValues(PreparedStatement ps) throws SQLException {
						ps.setString(1, approval.getUserId());
					}
				});
				if (refreshed != 1) {
					success = false;
				}
			}
		}
		return success;
	}

	public boolean purgeExpiredApprovals() {
		logger.debug("Purging expired approvals from database");
		try {
			int deleted = jdbcTemplate.update(deleteApprovalStatment + " where expiresAt <= ?", new PreparedStatementSetter() {
				@Override
				public void setValues(PreparedStatement ps) throws SQLException {
					ps.setTimestamp(1, new Timestamp(new Date().getTime()));
				}
			});
			logger.debug(deleted + " expired approvals deleted");
		} catch (DataAccessException ex) {
			logger.error("Error purging expired approvals", ex);
			return false;
		}
		return true;
	}

	@Override
	public List<Approval> getApprovals(String userName) {
		return jdbcTemplate.query(findApprovalStatement, rowMapper, userName);
	}

	private boolean updateApproval(final String sql, final Approval approval) {
		logger.debug(String.format("refreshing approval: [%s]", approval));
		int refreshed = jdbcTemplate.update(sql, new PreparedStatementSetter() {
			@Override
			public void setValues(PreparedStatement ps) throws SQLException {
				ps.setTimestamp(1, new Timestamp(approval.getExpiresAt().getTime()));
				ps.setString(2, (approval.getStatus() == null ? APPROVED : approval.getStatus()).toString());
				ps.setTimestamp(3, new Timestamp(approval.getLastUpdatedAt().getTime()));
				ps.setString(4, approval.getUserId());
			}
		});
		if (refreshed != 1) {
			return false;
		}
		return true;
	}

	private static class AuthorizationRowMapper implements RowMapper<Approval> {

		@Override
		public Approval mapRow(ResultSet rs, int rowNum) throws SQLException {
			String userName = rs.getString(4);
			Date expiresAt = rs.getTimestamp(1);
			String status = rs.getString(2);
			Date lastUpdatedAt = rs.getTimestamp(3);

			return new Approval(userName, expiresAt, ApprovalStatus.valueOf(status), lastUpdatedAt);
		}
	}
}
