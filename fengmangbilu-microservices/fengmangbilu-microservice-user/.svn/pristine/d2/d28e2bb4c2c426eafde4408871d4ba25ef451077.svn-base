package com.fengmangbilu.microservice.user.controllers;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationDetailsSource;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.fengmangbilu.microservice.user.endpoints.LoginRequest;
import com.fengmangbilu.microservice.user.exceptions.UserError;
import com.fengmangbilu.security.AccessToken;
import com.fengmangbilu.security.token.TokenService;
import com.fengmangbilu.web.Response;

import io.swagger.annotations.Api;

@Api
@Validated
@RestController
public class TokenController {

	@Autowired
	private TokenService tokenService;

	@Autowired
	private AuthenticationManager authenticationManager;
	
	protected AuthenticationDetailsSource<HttpServletRequest, ?> authenticationDetailsSource = new WebAuthenticationDetailsSource();

	@PostMapping("getToken")
	public Response getToken(@Valid @RequestBody LoginRequest loginRequest, HttpServletRequest request) {
		String username = loginRequest.getUsername();
		String password = loginRequest.getPassword();
		UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password);
		authRequest.setDetails(authenticationDetailsSource.buildDetails(request));
		Authentication authentication = authenticationManager.authenticate(authRequest);
		if (authentication == null || !authentication.isAuthenticated()) {
			throw new BadCredentialsException(UserError.ERR_PASSWORD_INCORRECT.getMessage());
		}
		AccessToken token = tokenService.createAccessToken(authentication);
		return Response.ok(token);
	}

	@PostMapping("refreshToken")
	public Response refreshToken(@RequestParam String refreshToken) {
		AccessToken token = tokenService.refreshAccessToken(refreshToken);
		return Response.ok(token);
	}
}
