package com.fengmangbilu.microservice.user.exceptions;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public enum UserError {

	ERR_MOBILE_NOT_FOUND(1000, UserErrorMessage.ERR_MOBILE_NOT_FOUND, "该手机号尚未注册"),
	ERR_MOBILE_DUPLICATE(1001, UserErrorMessage.ERR_MOBILE_DUPLICATE, "该手机号已经注册"),
	ERR_MOBILE_FORMAT(1002, UserErrorMessage.ERR_MOBILE_FORMAT, "手机号格式错误"),
	ERR_MOBILE_IS_BLANK(1003, UserErrorMessage.ERR_MOBILE_IS_BLANK, "手机号不能为空"),

	ERR_SMS_CODE(1010, UserErrorMessage.ERR_SMS_CODE, "验证码错误"),
	ERR_SMS_CODE_IS_BLANK(1011, UserErrorMessage.ERR_SMS_CODE_IS_BLANK, "验证码错误"),

	ERR_PASSWORD_FORMAT(1020, UserErrorMessage.ERR_PASSWORD_FORMAT, "密码位数必须在6-16之间"),
	ERR_PASSWORD_IS_BLANK(1021, UserErrorMessage.ERR_PASSWORD_IS_BLANK, "密码不能为空"),
	ERR_PASSWORD_INCORRECT(1022, UserErrorMessage.ERR_PASSWORD_INCORRECT, "帐号或密码错误"),

	ERR_ACCOUNT_IS_BLANK(1030, UserErrorMessage.ERR_ACCOUNT_IS_BLANK, "帐号不能为空"),

	ERR_UNKNOW(UserErrorMessage.ERR_DEFAULT_CODE, UserErrorMessage.ERR_UNKNOW, "未知错误");

	private int code;

	private String name;

	private String message;

	private UserError(int code, String name, String message) {
		this.code = code;
		this.name = name;
		this.message = message;
	}

	public static UserError getEnum(int code) {
		UserError result = null;
		UserError[] enums = UserError.values();
		for (int i = 0; i < enums.length; i++) {
			if (enums[i].getCode() == code) {
				result = enums[i];
				break;
			}
		}
		return result;
	}

	public static UserError getEnum(String name) {
		UserError result = null;
		UserError[] enums = UserError.values();
		for (int i = 0; i < enums.length; i++) {
			if (enums[i].getName().equals(name)) {
				result = enums[i];
				break;
			}
		}
		return result;
	}

	@SuppressWarnings({"rawtypes", "unchecked"})
	public static List toList() {
		UserError[] enums = UserError.values();
		List list = new ArrayList();
		for (int i = 0; i < enums.length; i++) {
			Map<String, String> map = new HashMap<String, String>();
			map.put("code", String.valueOf(enums[i].getCode()));
			map.put("message", enums[i].getMessage());
			list.add(map);
		}
		return list;
	}

	public static Map<String, Map<String, Object>> toMap() {
		UserError[] enums = UserError.values();
		Map<String, Map<String, Object>> enumMap = new HashMap<String, Map<String, Object>>();
		for (int num = 0; num < enums.length; num++) {
			Map<String, Object> map = new HashMap<String, Object>();
			String key = String.valueOf(getEnum(enums[num].getCode()));
			map.put("code", String.valueOf(enums[num].getCode()));
			map.put("message", enums[num].getMessage());
			enumMap.put(key, map);
		}
		return enumMap;
	}

	public int getCode() {
		return code;
	}

	public String getName() {
		return name;
	}

	public String getMessage() {
		return message;
	}
}
