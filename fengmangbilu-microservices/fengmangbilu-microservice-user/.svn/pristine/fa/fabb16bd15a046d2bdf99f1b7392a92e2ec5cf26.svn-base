package com.fengmangbilu.microservice.user.services;

import java.io.IOException;

import org.apache.commons.lang3.ArrayUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import com.fengmangbilu.microservice.user.exceptions.UserException;
import com.google.gson.Gson;
import com.qiniu.common.QiniuException;
import com.qiniu.common.Zone;
import com.qiniu.http.Response;
import com.qiniu.storage.BucketManager;
import com.qiniu.storage.Configuration;
import com.qiniu.storage.UploadManager;
import com.qiniu.storage.model.DefaultPutRet;
import com.qiniu.storage.model.FileInfo;
import com.qiniu.util.Auth;
import com.qiniu.util.StringMap;

@Service
public class QiniuServiceImpl implements QiniuService {

	public final static String[] DEFAULT_FILE_TYPE = new String[] {"png", "jpg", "jpeg"};

	public final static Long DEFAULT_FILE_SIZE = 2097152l; // 2M

	public final static Long EXPIRES = 3600l; // 有效时长

	@Value("${qiniu.accessKey}")
	private String accessKey;

	@Value("${qiniu.secretKey}")
	private String secretKey;

	@Override
	public BucketManager getBucketManager() {
		Configuration cfg = new Configuration(Zone.zone2());
		Auth auth = Auth.create(accessKey, secretKey);
		return new BucketManager(auth, cfg);
	}

	@Override
	public UploadManager getUploadManager() {
		Configuration cfg = new Configuration(Zone.zone2());
		return new UploadManager(cfg);
	}

	@Override
	public String getUpToken(String bucket) {
		Auth auth = Auth.create(accessKey, secretKey);
		return auth.uploadToken(bucket);
	}

	@Override
	public String getUpToken(String bucket, String key, StringMap map) {
		Auth auth = Auth.create(accessKey, secretKey);
		return auth.uploadToken(bucket, key, EXPIRES, map);
	}

	@Override
	public FileInfo getFileInfo(String bucket, String head) throws QiniuException {
		BucketManager bucketManager = getBucketManager();
		FileInfo fileInfo = bucketManager.stat(bucket, head);
		return fileInfo;
	}

	@Override
	public String uploadFile(String bucket, MultipartFile file, String sourceFile, String fileName) throws QiniuException {
		return uploadFile(bucket, file, sourceFile, fileName, DEFAULT_FILE_SIZE, DEFAULT_FILE_TYPE);
	}

	@Override
	public String uploadFile(String bucket, MultipartFile file, String sourceFile, String fileName, long fileSizeMax)
			throws QiniuException {
		return uploadFile(bucket, file, sourceFile, fileName, fileSizeMax, DEFAULT_FILE_TYPE);
	}

	@Override
	public String uploadFile(String bucket, MultipartFile file, String sourceFile, String fileName, long fileSizeMax,
			String... supportFileType) throws QiniuException {
		Assert.hasText(fileName, "fileName must not blank");
		if (StringUtils.isEmpty(file)) {
			throw UserException.ERR_FILE_IS_EMPTY;
		}
		// 检查文件大小和格式
		long fileContentLength = file.getSize();
		if (fileContentLength != -1 && fileContentLength > fileSizeMax) {
			throw UserException.ERR_FILE_SIZE;
		}
		String name = file.getOriginalFilename();
		String fileType = name.substring(name.lastIndexOf(".") + 1, name.length());
		if (!ArrayUtils.contains(supportFileType, fileType)) {
			throw UserException.ERR_FILE_TYPE;
		}
		fileName = new StringBuffer(fileName).append(".").append(fileType).toString();
		// 源文件和上传文件名称相同则覆盖上传 否则更新上传
		String token = null;
		if (fileName.equals(sourceFile)) {
			StringMap map = new StringMap();
			StringBuffer sb = new StringBuffer();
			map.put("scope", sb.append(bucket).append(":").append(fileName));
			token = getUpToken(bucket, fileName, map);
		} else {
			deleteFile(bucket, sourceFile);
			token = getUpToken("");
		}
		Response response = null;
		try {
			response = getUploadManager().put(file.getInputStream(), fileName, token, null, null);
		} catch (IOException e) {
			throw new QiniuException(Response.createError(null, null, 0, e.getMessage()));
		}
		DefaultPutRet putRet = new Gson().fromJson(response.bodyString(), DefaultPutRet.class);
		return putRet.key;
	}

	@Override
	public void deleteFile(String bucket, String key) throws QiniuException {
		try {
			getBucketManager().delete(bucket, key);
		} catch (QiniuException e) {
			// ingore
		}
	}

}
