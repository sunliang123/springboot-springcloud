package com.fengmangbilu.microservice.user.configs;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;

import com.fengmangbilu.microservice.security.authentication.TokenAuthenticationManager;
import com.fengmangbilu.microservice.security.authentication.TokenAuthenticationProcessingFilter;
import com.fengmangbilu.microservice.security.token.DefaultTokenService;
import com.fengmangbilu.microservice.security.token.TokenService;
import com.fengmangbilu.microservice.security.token.TokenStore;
import com.fengmangbilu.microservice.security.token.store.JwtAccessTokenConverter;
import com.fengmangbilu.microservice.security.token.store.JwtTokenStore;

@Configuration
@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true)
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private UserDetailsService userDetailsService;
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Override
	public void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.authenticationProvider(daoAuthenticationProvider());
	}

	@Bean
	public DaoAuthenticationProvider daoAuthenticationProvider() {
		DaoAuthenticationProvider daoAuthenticationProvider = new DaoAuthenticationProvider();
		daoAuthenticationProvider.setPasswordEncoder(passwordEncoder());
		daoAuthenticationProvider.setUserDetailsService(userDetailsService);
		daoAuthenticationProvider.setHideUserNotFoundExceptions(true);
		return daoAuthenticationProvider;
	}

	@Bean
	public JwtAccessTokenConverter accessTokenConverter() {
		JwtAccessTokenConverter converter = new JwtAccessTokenConverter();
		return converter;
	}

	@Bean
	public TokenStore tokenStore() {
		JwtTokenStore tokenStore = new JwtTokenStore();
		tokenStore.setJwtTokenEnhancer(accessTokenConverter());
		return tokenStore;
	}

	@Bean
	public TokenService tokenService() throws Exception {
		DefaultTokenService tokenService = new DefaultTokenService();
		tokenService.setTokenStore(tokenStore());
		tokenService.setTokenEnhancer(accessTokenConverter());
		tokenService.setAuthenticationManager(authenticationManagerBean());
		return tokenService;
	}

	@Bean
	public TokenAuthenticationProcessingFilter tokenAuthenticationProcessingFilter() throws Exception {
		TokenAuthenticationProcessingFilter tokenAuthenticationProcessingFilter = new TokenAuthenticationProcessingFilter();
		TokenAuthenticationManager tokenAuthenticationManager = new TokenAuthenticationManager();
		tokenAuthenticationManager.setTokenService(tokenService());
		tokenAuthenticationProcessingFilter.setAuthenticationManager(tokenAuthenticationManager);
		return tokenAuthenticationProcessingFilter;
	}

	@Override
	protected void configure(HttpSecurity httpSecurity) throws Exception {
		httpSecurity

				.csrf().disable()

				.exceptionHandling().and()

				.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()

				.authorizeRequests()
				
				.antMatchers("/v2/api-docs/**", "/swagger-resources/**", "/swagger-ui.html", "/webjars/**").permitAll()

				.antMatchers("/actuator/**").permitAll()

				.antMatchers("/token", "/register", "/resetPassword").permitAll()

				.anyRequest().authenticated();

		httpSecurity.addFilterBefore(tokenAuthenticationProcessingFilter(), AbstractPreAuthenticatedProcessingFilter.class);

		httpSecurity.headers().cacheControl();
	}

}
