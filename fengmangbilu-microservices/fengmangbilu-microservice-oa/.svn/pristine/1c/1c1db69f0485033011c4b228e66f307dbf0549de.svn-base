package com.fengmangbilu.microservice.oa.controllers;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.datatables.mapping.DataTablesInput;
import org.springframework.data.jpa.datatables.mapping.DataTablesOutput;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSON;
import com.fengmangbilu.annotation.JsonFilter;
import com.fengmangbilu.microservice.oa.clients.User;
import com.fengmangbilu.microservice.oa.clients.UserClient;
import com.fengmangbilu.microservice.oa.endpoints.AuthRequest;
import com.fengmangbilu.microservice.oa.endpoints.CompanyRequest;
import com.fengmangbilu.microservice.oa.entities.CompanyAuth;
import com.fengmangbilu.microservice.oa.entities.CompanyInfo;
import com.fengmangbilu.microservice.oa.entities.DeptInfo;
import com.fengmangbilu.microservice.oa.entities.IdCardInfo;
import com.fengmangbilu.microservice.oa.entities.ReportPushInfo;
import com.fengmangbilu.microservice.oa.entities.StaffInfo;
import com.fengmangbilu.microservice.oa.enums.AuthStatus;
import com.fengmangbilu.microservice.oa.enums.ReportStatus;
import com.fengmangbilu.microservice.oa.enums.ReportType;
import com.fengmangbilu.microservice.oa.exceptions.CompanyException;
import com.fengmangbilu.microservice.oa.services.CompanyAuthService;
import com.fengmangbilu.microservice.oa.services.CompanyInfoService;
import com.fengmangbilu.microservice.oa.services.DeptInfoService;
import com.fengmangbilu.microservice.oa.services.IdCardInfoService;
import com.fengmangbilu.microservice.oa.services.QiniuService;
import com.fengmangbilu.microservice.oa.services.ReportPushInfoService;
import com.fengmangbilu.microservice.oa.services.StaffInfoService;
import com.fengmangbilu.microservice.oa.utils.ExcelData;
import com.fengmangbilu.microservice.oa.utils.ExportExcelUtils;
import com.fengmangbilu.microservice.oa.utils.QRCodeUtil;
import com.fengmangbilu.web.Response;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import io.swagger.annotations.Api;

@Api(tags = "WEB接口")
@Validated
@RestController
@RequestMapping("company")
public class CompanyController {

	@Autowired
	private UserClient userClient;

	@Autowired
	private QiniuService qiniuService;

	@Autowired
	private DeptInfoService deptInfoService;

	@Autowired
	private StaffInfoService staffInfoService;

	@Autowired
	private CompanyInfoService companyInfoService;

	@Autowired
	private CompanyAuthService companyAuthService;

	@Autowired
	private ReportPushInfoService reportPushInfoService;

	@Autowired
	private IdCardInfoService idCardInfoService;

	@PostMapping("submit")
	public Response submit(@AuthenticationPrincipal String userId, @Valid @RequestBody CompanyRequest request) throws Exception {
		StaffInfo staffInfo = staffInfoService.findByIsLeaveFalseAndUserId(userId);
		if (!ObjectUtils.isEmpty(staffInfo)) {
			throw CompanyException.AUDIT_SUCCESS;
		}
		CompanyAuth auth = companyAuthService.findFirstByCreatedByOrderByCreatedDateDesc(userId);
		if (!ObjectUtils.isEmpty(auth) && ObjectUtils.nullSafeEquals(auth.getStatus(), AuthStatus.SUBMIT)) {
			throw CompanyException.AUDIT_NOT_COMPLETED;
		}
		auth = new CompanyAuth();
		BeanUtils.copyProperties(request, auth);
		companyAuthService.save(auth);
		return Response.ok();
	}

	@PostMapping("upload")
	public Response upload(@RequestParam("file") MultipartFile file) throws Exception {
		String fileName = UUID.randomUUID().toString().replaceAll("\\-", "");
		String businessLicense = qiniuService.uploadTempFile(file, fileName);
		return Response.ok(businessLicense);
	}

	@PostMapping("audit")
	@PreAuthorize("hasRole('ROLE_ADMIN')")
	public Response audit(@RequestHeader("Authorization") String token, @AuthenticationPrincipal String userId,
			@Valid @RequestBody AuthRequest request) throws Exception {
		CompanyAuth auth = companyAuthService.findOne(request.getId());
		if (ObjectUtils.isEmpty(auth)) {
			throw CompanyException.NO_DATA;
		}
		if (!ObjectUtils.nullSafeEquals(auth.getStatus(), AuthStatus.SUBMIT)) {
			throw CompanyException.AUDIT_COMPLETED;
		}
		Response response = userClient.grantUserHrRole(token, auth.getCreatedBy());
		String data = JSON.toJSONString(response.getData());
		if (response.getCode() != 200) {
			return response;
		}
		if (response.getData() == null) {
			throw CompanyException.TIMEOUT;
		}
		User user = JSON.parseObject(data, User.class);

		BeanUtils.copyProperties(request, auth);
		auth = companyAuthService.audit(auth, user);

		return Response.ok(auth);
	}

	@PostMapping("addDeptInfo")
	@PreAuthorize("hasRole('ROLE_HR')")
	public Response addDeptInfo(@AuthenticationPrincipal String userId, @RequestParam String deptName) throws Exception {
		StaffInfo staffInfo = staffInfoService.findByIsLeaveFalseAndUserId(userId);
		if (ObjectUtils.isEmpty(staffInfo)) {
			throw CompanyException.UNAUTHORIZED;
		}
		DeptInfo deptInfo = new DeptInfo();
		deptInfo.setCompanyId(staffInfo.getCompanyId());
		deptInfo.setName(deptName);
		deptInfo.setSuperId(-1l);
		deptInfo.setHasSubDept(false);
		deptInfoService.save(deptInfo);
		return Response.ok();
	}

	@PostMapping("editDeptInfo")
	@PreAuthorize("hasRole('ROLE_HR')")
	public Response editDeptInfo(@AuthenticationPrincipal String userId, @RequestParam Long deptId, @RequestParam String deptName)
			throws Exception {
		StaffInfo staffInfo = staffInfoService.findByIsLeaveFalseAndUserId(userId);
		if (ObjectUtils.isEmpty(staffInfo)) {
			throw CompanyException.UNAUTHORIZED;
		}
		DeptInfo deptInfo = deptInfoService.findOne(deptId);
		if (deptInfo == null) {
			throw CompanyException.NO_DATA;
		}
		deptInfo.setName(deptName);
		deptInfoService.save(deptInfo);
		return Response.ok();
	}

	@PostMapping("delDeptInfo")
	@PreAuthorize("hasRole('ROLE_HR')")
	public Response delDeptInfo(@AuthenticationPrincipal String userId, @RequestParam Long deptId) throws Exception {
		StaffInfo staffInfo = staffInfoService.findByIsLeaveFalseAndUserId(userId);
		if (ObjectUtils.isEmpty(staffInfo)) {
			throw CompanyException.UNAUTHORIZED;
		}
		DeptInfo deptInfo = deptInfoService.findOne(deptId);
		if (deptInfo == null) {
			throw CompanyException.NO_DATA;
		}
		long count = staffInfoService.countByDeptId(deptId);
		if (count > 0) {
			throw CompanyException.HAS_STAFF;
		}
		deptInfoService.delete(deptInfo);
		return Response.ok();
	}

	@GetMapping("getQrCode")
	@PreAuthorize("hasRole('ROLE_HR')")
	public Response getQrCode(@AuthenticationPrincipal String userId, @RequestParam ReportType type) throws Exception {
		Map<String, String> contentMap = Maps.newHashMap();
		contentMap.put("type", type.name());
		contentMap.put("userId", userId);
		String content = JSON.toJSONString(contentMap);
		return Response.ok(null, QRCodeUtil.create(content, 200, 200));
	}

	@GetMapping("getCompanyStatus")
	@JsonFilter(target = CompanyAuth.class, filter = {"id", "createdBy", "lastModifiedBy"})
	public Response getCompanyAuth(@AuthenticationPrincipal String userId) throws Exception {
		Map<String, Object> data = Maps.newHashMap();
		StaffInfo staffInfo = staffInfoService.findByIsLeaveFalseAndUserId(userId);
		if (!ObjectUtils.isEmpty(staffInfo)) {
			data.put("status", AuthStatus.SUCCESS.ordinal());
			data.put("companyName", staffInfo.getCompanyName());
			return Response.ok(data);
		}
		CompanyAuth auth = companyAuthService.findFirstByCreatedByOrderByCreatedDateDesc(userId);
		if (ObjectUtils.isEmpty(auth)) {
			data.put("status", AuthStatus.UNAUTH.ordinal());
			return Response.ok(data);
		}
		IdCardInfo idCardInfo = idCardInfoService.findFirstByCreatedBy(userId);
		if (!ObjectUtils.isEmpty(idCardInfo)) {
			auth.setName(idCardInfo.getName());
			auth.setIdCard(idCardInfo.getIdCard());
		}
		return Response.ok(auth);
	}

	@GetMapping("getCompanyInfo")
	@PreAuthorize("hasRole('ROLE_EMP')")
	public Response getCompanyInfo(@AuthenticationPrincipal String userId) throws Exception {
		StaffInfo staffInfo = staffInfoService.findByIsLeaveFalseAndUserId(userId);
		if (ObjectUtils.isEmpty(staffInfo)) {
			throw CompanyException.UNAUTHORIZED;
		}
		CompanyInfo companyInfo = companyInfoService.findOne(staffInfo.getCompanyId());
		return Response.ok(companyInfo);
	}

	@GetMapping("getDeptInfos")
	@PreAuthorize("hasRole('ROLE_EMP')")
	@JsonFilter(target = DeptInfo.class, filter = {"superId", "companyId", "sortFactor", "hasSubDept"})
	public Response getDeptInfo(@AuthenticationPrincipal String userId) throws Exception {
		StaffInfo staffInfo = staffInfoService.findByIsLeaveFalseAndUserId(userId);
		if (ObjectUtils.isEmpty(staffInfo)) {
			throw CompanyException.UNAUTHORIZED;
		}
		List<DeptInfo> deptInfos = deptInfoService.findByCompanyId(staffInfo.getCompanyId());
		return Response.ok(deptInfos);
	}

	@GetMapping("getStaffInfo")
	@PreAuthorize("hasRole('ROLE_EMP')")
	@JsonFilter(target = StaffInfo.class, filter = {"id", "createdBy", "lastModifiedBy"})
	public Response getStaffInfo(@AuthenticationPrincipal String userId) throws Exception {
		StaffInfo staffInfo = staffInfoService.findByIsLeaveFalseAndUserId(userId);
		if (ObjectUtils.isEmpty(staffInfo)) {
			throw CompanyException.UNAUTHORIZED;
		}
		return Response.ok(staffInfo);
	}

	@GetMapping("getStaffInfos")
	@PreAuthorize("hasRole('ROLE_EMP')")
	public DataTablesOutput<StaffInfo> getStaffInfos(@AuthenticationPrincipal String userId,
			@RequestParam(required = false) Long deptId,
			@DateTimeFormat(pattern = "yyyy-MM-dd") @RequestParam(required = false) Date startDate,
			@DateTimeFormat(pattern = "yyyy-MM-dd") @RequestParam(required = false) Date endDate, @Valid DataTablesInput input)
			throws Exception {
		StaffInfo staffInfo = staffInfoService.findByIsLeaveFalseAndUserId(userId);
		if (ObjectUtils.isEmpty(staffInfo)) {
			throw CompanyException.UNAUTHORIZED;
		}
		Specification<StaffInfo> spec = new Specification<StaffInfo>() {
			@Override
			public Predicate toPredicate(Root<StaffInfo> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();
				predicates.add(cb.equal(root.get("companyId").as(String.class), staffInfo.getCompanyId()));
				if (!StringUtils.isEmpty(startDate)) {
					predicates.add(cb.greaterThanOrEqualTo(root.get("entryDate").as(Date.class), startDate));
				}
				if (!StringUtils.isEmpty(endDate)) {
					predicates.add(cb.lessThanOrEqualTo(root.get("entryDate").as(Date.class), endDate));
				}
				if (!StringUtils.isEmpty(deptId)) {
					predicates.add(cb.equal(root.get("deptId").as(Long.class), deptId));
				}
				query.where(cb.and(predicates.toArray(new Predicate[predicates.size()])));
				query.orderBy(cb.desc(root.get("entryDate")));
				return query.getRestriction();
			}
		};
		return staffInfoService.findAll(input, spec);
	}

	@GetMapping("getReportPushInfos")
	@PreAuthorize("hasRole('ROLE_HR')")
	public DataTablesOutput<ReportPushInfo> getReportPushInfos(@AuthenticationPrincipal String userId,
			@Valid DataTablesInput input) {
		StaffInfo staffInfo = staffInfoService.findByIsLeaveFalseAndUserId(userId);
		if (ObjectUtils.isEmpty(staffInfo)) {
			throw CompanyException.UNAUTHORIZED;
		}
		Specification<ReportPushInfo> spec = new Specification<ReportPushInfo>() {
			@Override
			public Predicate toPredicate(Root<ReportPushInfo> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predicates = new ArrayList<>();
				predicates.add(cb.equal(root.get("userId").as(String.class), userId));
				predicates.add(cb.equal(root.get("status").as(ReportStatus.class), ReportStatus.PUSHED));
				query.where(cb.and(predicates.toArray(new Predicate[predicates.size()])));
				query.orderBy(cb.desc(root.get("createdDate")));
				return query.getRestriction();
			}
		};
		return reportPushInfoService.findAll(input, spec);
	}

	@PostMapping("exportStaffInfos")
	@PreAuthorize("hasRole('ROLE_HR')")
	public void exportStaffInfos(@AuthenticationPrincipal String userId, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ExcelData data = new ExcelData();
		data.setName("员工名册");
		List<String> titles = Lists.newArrayList();
		titles.add("姓名");
		titles.add("手机号");
		titles.add("身份证");
		titles.add("部门");
		titles.add("职位");
		titles.add("学历");
		titles.add("入职日期");
		data.setTitles(titles);
		List<List<Object>> rows = Lists.newArrayList();
		List<Object> row = Lists.newArrayList();
		row.add("11111111111");
		row.add("22222222222");
		row.add("3333333333");
		rows.add(row);
		data.setRows(rows);
		ExportExcelUtils.exportExcel(request, response, "员工名册.xls", data);
	}

}
